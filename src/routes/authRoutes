// routes/authRoutes.js
const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { body, validationResult } = require('express-validator');
const User = require('../models/user');

router.post('/register', [
    body('name').notEmpty().withMessage('Name is required'),
    body('email').isEmail().withMessage('Valid email is required'),
    body('password').isLength({ min: 8 }).withMessage('Password must be at least 8 characters')
], async(req,res) => {
    const errors = validationResult(req); //the result of that array looking ahh up there ⬆️
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { name, email, password } = req.body;

    try{
        //check email have alr been used before
        const emailUsed = await User.findOne({ email });
        if (emailUsed) {
            return res.status(400).json({ message: 'Email already used' });
        }
        //check if username have alr been used
        const nameUsed = await User.findOne({ name });
        if (nameUsed){
            return res.status(400).json({ message: 'Username already used'})
        }

        //create new user
        const user = new User({ name, email, password });
        await user.save();

        res.status(201).json({ message: 'User registered successfully' });
    }catch(err){
        res.status(500).json({ message: 'Server error', error: err.message });
    }
});

router.post('/login', [
    body('email').isEmail().withMessage('Valid email is required'),
    body('password').notEmpty().withMessage('Password is required')
], async(req,res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { email, password } = req.body;
    try{
        const foundEmail = await User.findOne({ email });
        if (!foundEmail) {
            return res.status(401).json({ message: 'Email not found' });
        }
        
        //checking password
        const isMatch = await bcrypt.compare(password, foundEmail.password);
        if (!isMatch) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        const token = jwt.sign({ id: foundEmail._id }, process.env.JWT_SECRET, { expiresIn: '7d' });

        res.status(200).json({ token });
    }catch (err){
        res.status(500).json({ message: 'Server error', error: err.message });
    }
});

module.exports = router